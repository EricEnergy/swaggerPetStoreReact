{"version":3,"sources":["services/axios.js","pages/dashboard/index.js","pages/dashboard2/index.js","components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["getInventory","status","url","axios","method","Dashboard","useState","inventoryList","setInventoryList","loading","setLoading","useEffect","a","inventory","data","init","onButtonChange","e","newInventoryList","id","parseInt","target","dataset","find","item","index","className","Table","striped","bordered","hover","variant","map","name","category","Button","data-id","onClick","Dashboard2","props","renderTable","state","setState","then","resp","this","Component","NavBar","Navbar","bg","Brand","Nav","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAGaA,EAAe,SAACC,GACzB,IAAMC,EAAG,iEAA6DD,GACtE,OAAOE,IAAM,CACXD,MACAE,OAAQ,S,gBC4DCC,MA9Df,WAAsB,IAAD,EACyBC,qBADzB,mBACVC,EADU,KACKC,EADL,OAEaF,oBAAS,GAFtB,mBAEVG,EAFU,KAEDC,EAFC,KAMjBC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC4BZ,EAAa,aADzC,cACUa,EADV,gBAEUL,EAAiBK,EAAUC,MAFrC,OAGIJ,GAAW,GAHf,4CADY,uBAAC,WAAD,wBAMZK,KACD,IAIH,IAcMC,EAAiB,SAACC,GACpB,IAAMC,EAAgB,YAAOX,GACvBY,EAAKC,SAASH,EAAEI,OAAOC,QAAQH,IACxBD,EAAiBK,MAAK,SAACC,EAAMC,GAAP,OAAiBA,IAAUN,KACzDlB,OAAS,OAEdO,EAAiBU,IAGrB,OACI,eAAC,WAAD,WACI,oBAAIQ,UAAU,cAAd,mCACA,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAtC,UACI,gCACI,+BACI,uCAEA,sCACA,0CACA,wCACA,6CAGR,gCACKtB,EAAU,aArChBF,EAAcyB,KAAI,SAAClB,EAAMW,GAAW,IAAD,EACtC,OAAO,+BACH,6BAAKA,IAEL,6BAAKX,EAAKmB,KAAOnB,EAAKmB,KAAO,QAC7B,8BAAK,UAAAnB,EAAKoB,gBAAL,eAAeD,MAAOnB,EAAKoB,SAASD,KAAO,QAChD,6BAAKnB,EAAKb,SACV,6BAAI,cAACkC,EAAA,EAAD,CAAQC,UAASX,EAAOM,QAAyB,cAAhBjB,EAAKb,OAAyB,UAAY,YAAaoC,QAASrB,EAAjG,SAAkI,cAAhBF,EAAKb,OAAyB,WAAa,aANrJwB,e,gCCkDba,G,wDApEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAoBVC,YAAc,WACV,OAAO,EAAKC,MAAMlC,cAAcyB,KAAI,SAAClB,EAAMW,GAAW,IAAD,EACjD,OAAO,+BACH,6BAAKA,IAEL,6BAAKX,EAAKmB,KAAOnB,EAAKmB,KAAO,QAC7B,8BAAK,UAAAnB,EAAKoB,gBAAL,eAAeD,MAAOnB,EAAKoB,SAASD,KAAO,QAChD,6BAAKnB,EAAKb,SACV,6BAAI,cAACkC,EAAA,EAAD,CAAQC,UAASX,EAAOM,QAAyB,cAAhBjB,EAAKb,OAAyB,UAAY,YAAaoC,QAAS,EAAKrB,eAAtG,SAAuI,cAAhBF,EAAKb,OAAyB,WAAa,kBA7B/J,EAmCnBe,eAAiB,SAACC,GACd,IAAMC,EAAgB,YAAO,EAAKuB,MAAMlC,eAClCY,EAAKC,SAASH,EAAEI,OAAOC,QAAQH,IACxBD,EAAiBK,MAAK,SAACC,EAAMC,GAAP,OAAiBA,IAAUN,KACzDlB,OAAS,OAEd,EAAKyC,SAAS,CAAEnC,cAAeW,KAvC/B,EAAKuB,MAAQ,CACTlC,cAAe,GACfE,SAAS,GAJE,E,gEAUE,IAAD,OAChBT,EAAa,aACR2C,MAAK,SAACC,GAAD,OAAUA,EAAK9B,QACpB6B,MAAK,SAAC7B,GACH,EAAK4B,SAAS,CAAEnC,cAAeO,IAC/B,EAAK4B,SAAS,CAAEjC,SAAS,S,+BA8BjC,OACI,eAAC,WAAD,WACA,oBAAIiB,UAAU,cAAd,8BACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAtC,UACI,gCACI,+BACI,uCAEA,sCACA,0CACA,wCACA,6CAGR,gCACKc,KAAKJ,MAAMhC,QAAU,aAAeoC,KAAKL,0B,GA7DzCM,c,wBCeVC,MAdf,WAEI,OACI,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOlB,QAAQ,OAA1B,UACI,cAACiB,EAAA,EAAOE,MAAR,wBACA,eAACC,EAAA,EAAD,CAAKzB,UAAU,UAAf,UACI,cAAC,IAAD,CAAMA,UAAU,WAAW0B,GAAG,IAA9B,sCACA,cAAC,IAAD,CAAM1B,UAAU,WAAhB,eACA,cAAC,IAAD,CAAMA,UAAU,WAAW0B,GAAG,cAA9B,sC,MCEDC,MAVf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC,cAAC,IAAD,CAAOkD,KAAK,cAAcC,UAAWlB,QCC5BmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ffeedfd0.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nexport const getInventory = (status) => {\r\n    const url = `https://petstore.swagger.io/v2/pet/findByStatus?status=${status}`;\r\n    return axios({\r\n      url,\r\n      method: 'GET',\r\n    });\r\n  };\r\n  ","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./style.css\";\r\nimport { getInventory } from '../../services/axios';\r\nimport { Button, Table } from 'react-bootstrap';\r\n\r\nfunction Dashboard() {\r\n    const [inventoryList, setInventoryList] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Start up function which calls the API and sets data into state\r\n    // Line 14 I send \"available\" in case we want to see \"pending\", or \"sold\" later on\r\n    useEffect(() => {\r\n        async function init() {\r\n            const inventory = await getInventory(\"available\");\r\n            await setInventoryList(inventory.data);\r\n            setLoading(false);\r\n        };\r\n        init();\r\n    }, []);\r\n\r\n    //Render table rows plus store index number in a data custom attribute \r\n    //Line 29 Check if category is available then check if data.category.name (new feature es8)\r\n    const renderTable = () => {\r\n        return inventoryList.map((data, index) => {\r\n            return <tr key={index}>\r\n                <td>{index}</td>\r\n                {/* <td>{data.id}</td> */}\r\n                <td>{data.name ? data.name : \"N/A\"}</td>\r\n                <td>{data.category?.name ? data.category.name : \"N/A\"}</td>\r\n                <td>{data.status}</td>\r\n                <td><Button data-id={index} variant={data.status === \"available\" ? \"primary\" : \"secondary\"} onClick={onButtonChange}>{data.status === \"available\" ? \"Purchase\" : \"Sold\"}</Button></td>\r\n            </tr>\r\n        })\r\n    };\r\n\r\n    //Onclick event for purchase\r\n    const onButtonChange = (e) => {\r\n        const newInventoryList = [...inventoryList];\r\n        const id = parseInt(e.target.dataset.id);\r\n        const item = newInventoryList.find((item, index) => index === id);\r\n        item.status = \"sold\";\r\n\r\n        setInventoryList(newInventoryList);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <h4 className=\"text-center\">Functional Component </h4>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Index</th>\r\n                        {/* <th>ID</th> */}\r\n                        <th>Name</th>\r\n                        <th>Catagory</th>\r\n                        <th>Status</th>\r\n                        <th>Button</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {loading ? \"Loading...\" : renderTable()}\r\n                </tbody>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React, { Fragment, Component } from \"react\";\r\nimport \"./style.css\";\r\nimport { getInventory } from '../../services/axios';\r\nimport { Button, Table } from 'react-bootstrap';\r\n\r\nclass Dashboard2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inventoryList: {},\r\n            loading: true\r\n        };\r\n    };\r\n\r\n    // Start up function which calls the API and sets data into state\r\n    // Line 18 I send \"available\" in case we want to see \"pending\", or \"sold\" later on\r\n    componentDidMount() {\r\n        getInventory(\"available\")\r\n            .then((resp) => resp.data)\r\n            .then((data) => {\r\n                this.setState({ inventoryList: data });\r\n                this.setState({ loading: false });\r\n            });\r\n    };\r\n\r\n    //Render table rows\r\n    //Line 34 Check if category is available then check if data.category.name (new feature es8) There was an id as well so I went with the name for the category\r\n    renderTable = () => {\r\n        return this.state.inventoryList.map((data, index) => {\r\n            return <tr>\r\n                <td>{index}</td>\r\n                {/* <td>{data.id}</td> */}\r\n                <td>{data.name ? data.name : \"N/A\"}</td>\r\n                <td>{data.category?.name ? data.category.name : \"N/A\"}</td>\r\n                <td>{data.status}</td>\r\n                <td><Button data-id={index} variant={data.status === \"available\" ? \"primary\" : \"secondary\"} onClick={this.onButtonChange}>{data.status === \"available\" ? \"Purchase\" : \"Sold\"}</Button></td>\r\n            </tr>\r\n        })\r\n    };\r\n\r\n    //Onclick event for purchasing\r\n    onButtonChange = (e) => {\r\n        const newInventoryList = [...this.state.inventoryList];\r\n        const id = parseInt(e.target.dataset.id);\r\n        const item = newInventoryList.find((item, index) => index === id);\r\n        item.status = \"sold\";\r\n\r\n        this.setState({ inventoryList: newInventoryList });\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <Fragment>\r\n            <h4 className=\"text-center\">Class Component </h4>\r\n                <Table striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Index</th>\r\n                            {/* <th>ID</th> */}\r\n                            <th>Name</th>\r\n                            <th>Catagory</th>\r\n                            <th>Status</th>\r\n                            <th>Button</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.loading ? \"Loading...\" : this.renderTable()}\r\n                    </tbody>\r\n                </Table>\r\n            </Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Dashboard2;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nfunction NavBar() {\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand >Pet Store</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Link className=\"nav-link\" to=\"/\">Dashboard (Functional)  </Link>\r\n                <Link className=\"nav-link\">|</Link>\r\n                <Link className=\"nav-link\" to=\"/dashboard2\">Dashboard (Class)</Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n\r\n\r\n","import { HashRouter as Router, Route } from \"react-router-dom\";\nimport Dashboard from '../src/pages/dashboard';\nimport Dashboard2 from '../src/pages/dashboard2';\nimport Navbar from '../src/components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Route exact path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard2\" component={Dashboard2} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}