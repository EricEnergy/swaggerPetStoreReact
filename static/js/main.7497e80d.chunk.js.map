{"version":3,"sources":["components/Navbar/index.js","services/axios.js","pages/dashboard/index.js","pages/dashboard2/index.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","useState","positionColor","setPositionColor","useEffect","console","log","location","Navbar","bg","variant","Brand","Nav","className","to","disable","getInventory","status","url","axios","method","Dashboard","inventoryList","setInventoryList","loading","setLoading","a","inventory","data","init","onButtonChange","e","newInventoryList","id","parseInt","target","dataset","find","item","index","Table","striped","bordered","hover","map","name","category","Button","data-id","disabled","onClick","Dashboard2","renderTable","state","setState","then","resp","this","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7497e80d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nfunction NavBar(props) {\r\n\r\n    const [positionColor, setPositionColor] = useState(true);\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        if (props.location === \"dashboard1\") {\r\n            setPositionColor(true)\r\n        } else {\r\n            setPositionColor(false)\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" >\r\n            <Navbar.Brand >Pet Store</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Link className={positionColor ? \"dash-Class\" : \"nav-link\"} to=\"/\">Dashboard (Functional)</Link>\r\n                <Link disable={true} className=\"nav-link\">|</Link>\r\n                <Link className={!positionColor ? \"dash-Class\" : \"nav-link\"} to=\"/dashboard2\">Dashboard (Class)</Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n\r\n\r\n","import axios from 'axios';\r\n\r\n\r\nexport const getInventory = (status) => {\r\n    const url = `https://petstore.swagger.io/v2/pet/findByStatus?status=${status}`;\r\n    return axios({\r\n      url,\r\n      method: 'GET',\r\n    });\r\n  };\r\n  ","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport Navbar from '../../components/Navbar';\r\nimport \"./style.css\";\r\nimport { getInventory } from '../../services/axios';\r\nimport { Button, Table } from 'react-bootstrap';\r\n\r\nfunction Dashboard() {\r\n    const [inventoryList, setInventoryList] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Start up function which calls the API and sets data into state\r\n    // Line 15 I send \"available\" in case we want to see \"pending\", or \"sold\" later on\r\n    useEffect(() => {\r\n        async function init() {\r\n            const inventory = await getInventory(\"available\");\r\n            await setInventoryList(inventory.data);\r\n            setLoading(false);\r\n        };\r\n        init();\r\n    }, []);\r\n\r\n    //Render table rows plus store index number in a data custom attribute \r\n    //Line 30 Check if category is available then check if data.category.name (new feature es8)\r\n    const renderTable = () => {\r\n        return inventoryList.map((data, index) => {\r\n            return <tr key={index}>\r\n                <td>{index}</td>\r\n                {/* <td>{data.id}</td> */}\r\n                <td>{data.name ? data.name : \"N/A\"}</td>\r\n                <td>{data.category?.name ? data.category.name : \"N/A\"}</td>\r\n                <td>{data.status}</td>\r\n                <td><Button data-id={index} variant={data.status === \"available\" ? \"primary\" : \"secondary\" } disabled={data.status === \"available\" ? false : true} onClick={onButtonChange}>{data.status === \"available\" ? \"Purchase\" : \"Purchased\"}</Button></td>\r\n            </tr>\r\n        })\r\n    };\r\n\r\n    //Onclick event to purchase\r\n    const onButtonChange = (e) => {\r\n        const newInventoryList = [...inventoryList];\r\n        const id = parseInt(e.target.dataset.id);\r\n        const item = newInventoryList.find((item, index) => index === id);\r\n        item.status = \"sold\";\r\n\r\n        setInventoryList(newInventoryList);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navbar location={\"dashboard1\"}/>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Index</th>\r\n                        {/* <th>ID</th> */}\r\n                        <th>Name</th>\r\n                        <th>Catagory</th>\r\n                        <th>Status</th>\r\n                        <th>Button</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {loading ? \"Loading...\" : renderTable()}\r\n                </tbody>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React, { Fragment, Component } from \"react\";\r\nimport \"./style.css\";\r\nimport { getInventory } from '../../services/axios';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport Navbar from '../../components/Navbar';\r\n\r\nclass Dashboard2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inventoryList: {},\r\n            loading: true\r\n        };\r\n    };\r\n\r\n    // Start up function which calls the API and sets data into state\r\n    // Line 19 I send \"available\" in case we want to see \"pending\", or \"sold\" later on\r\n    componentDidMount() {\r\n        getInventory(\"available\")\r\n            .then((resp) => resp.data)\r\n            .then((data) => {\r\n                this.setState({ inventoryList: data });\r\n                this.setState({ loading: false });\r\n            });\r\n    };\r\n\r\n    //Render table rows\r\n    //Line 35 Check if category is available then check if data.category.name (new feature es8) There was an id as well so I went with the name for the category\r\n    renderTable = () => {\r\n        return this.state.inventoryList.map((data, index) => {\r\n            return <tr>\r\n                <td>{index}</td>\r\n                {/* <td>{data.id}</td> */}\r\n                <td>{data.name ? data.name : \"N/A\"}</td>\r\n                <td>{data.category?.name ? data.category.name : \"N/A\"}</td>\r\n                <td>{data.status}</td>\r\n                <td><Button data-id={index} variant={data.status === \"available\" ? \"primary\" : \"secondary\"} disabled={data.status === \"available\" ? false : true} onClick={this.onButtonChange}>{data.status === \"available\" ? \"Purchase\" : \"Purchased\"}</Button></td>\r\n            </tr>\r\n        })\r\n    };\r\n\r\n    //Onclick event to purchasing\r\n    onButtonChange = (e) => {\r\n        const newInventoryList = [...this.state.inventoryList];\r\n        const id = parseInt(e.target.dataset.id);\r\n        const item = newInventoryList.find((item, index) => index === id);\r\n        item.status = \"sold\";\r\n\r\n        this.setState({ inventoryList: newInventoryList });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Navbar location={\"dashboard2\"} />\r\n                <Table striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Index</th>\r\n                            {/* <th>ID</th> */}\r\n                            <th>Name</th>\r\n                            <th>Catagory</th>\r\n                            <th>Status</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.loading ? \"Loading...\" : this.renderTable()}\r\n                    </tbody>\r\n                </Table>\r\n            </Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Dashboard2;","import { HashRouter as Router, Route } from \"react-router-dom\";\nimport Dashboard from '../src/pages/dashboard';\nimport Dashboard2 from '../src/pages/dashboard2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard2\" component={Dashboard2} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}